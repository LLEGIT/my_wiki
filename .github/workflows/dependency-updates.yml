name: Dependency Updates

on:
  schedule:
    # Check for updates weekly on Mondays at 09:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-base-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for PostgreSQL updates
        id: postgres-check
        run: |
          current_version=$(grep "FROM postgres:" .docker/db/Dockerfile | cut -d: -f2)
          echo "current_postgres=$current_version" >> $GITHUB_OUTPUT

          # Get latest PostgreSQL 17 Alpine tags
          latest_version=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/postgres/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^17.*-alpine$")) | .name' | head -1)
          echo "latest_postgres=$latest_version" >> $GITHUB_OUTPUT

          if [ "$current_version" != "$latest_version" ]; then
            echo "postgres_update_available=true" >> $GITHUB_OUTPUT
            echo "PostgreSQL update available: $current_version -> $latest_version"
          else
            echo "postgres_update_available=false" >> $GITHUB_OUTPUT
            echo "PostgreSQL is up to date: $current_version"
          fi

      - name: Check for Wiki.js updates
        id: wiki-check
        run: |
          current_version=$(grep "FROM ghcr.io/requarks/wiki:" .docker/wiki/Dockerfile | cut -d: -f3)
          echo "current_wiki=$current_version" >> $GITHUB_OUTPUT

          # Note: Wiki.js uses semantic versioning, checking latest would require GitHub API
          echo "Manual check required for Wiki.js updates"
          echo "Current version: $current_version"
          echo "Please check: https://github.com/Requarks/wiki/releases"

      - name: Create update summary
        run: |
          echo "# 📦 Dependency Update Check" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Current Versions" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL: ${{ steps.postgres-check.outputs.current_postgres }}" >> $GITHUB_STEP_SUMMARY
          echo "- Wiki.js: ${{ steps.wiki-check.outputs.current_wiki }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.postgres-check.outputs.postgres_update_available }}" = "true" ]; then
            echo "## 🚀 Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "- PostgreSQL: ${{ steps.postgres-check.outputs.current_postgres }} -> ${{ steps.postgres-check.outputs.latest_postgres }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Recommended Actions" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the [PostgreSQL release notes](https://www.postgresql.org/docs/release/)" >> $GITHUB_STEP_SUMMARY
            echo "2. Test the update in a development environment" >> $GITHUB_STEP_SUMMARY
            echo "3. Update the Dockerfile if compatible" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ All Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue for updates (if needed)
        if: steps.postgres-check.outputs.postgres_update_available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '📦 PostgreSQL Base Image Update Available';
            const body = `
            ## PostgreSQL Update Available

            **Current Version:** \`${{ steps.postgres-check.outputs.current_postgres }}\`
            **Latest Version:** \`${{ steps.postgres-check.outputs.latest_postgres }}\`

            ### Recommended Steps:
            1. Review the [PostgreSQL ${{ steps.postgres-check.outputs.latest_postgres }} release notes](https://www.postgresql.org/docs/release/)
            2. Test the update in a development environment
            3. Update \`.docker/db/Dockerfile\` if compatible:
               \`\`\`dockerfile
               FROM postgres:${{ steps.postgres-check.outputs.latest_postgres }}
               \`\`\`
            4. Run security scans to ensure no new vulnerabilities
            5. Update production after successful testing

            ### Files to Update:
            - \`.docker/db/Dockerfile\`

            ---
            *This issue was automatically created by the Dependency Updates workflow.*
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['dependencies', 'postgresql']
            });

            const existingIssue = issues.data.find(issue => issue.title === title);

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'postgresql', 'enhancement']
              });
              console.log('Created new issue for PostgreSQL update');
            } else {
              console.log('Issue for PostgreSQL update already exists');
            }

  check-security-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          DB_NAME=wiki
          DB_USER=wikijs
          DB_PASS=test_password
          DB_HOST=db
          DB_PORT=5432
          HOST_PORT=8080
          EOF

      - name: Build images and check for security updates
        run: |
          echo "Building images to check for security updates..."
          docker compose build --no-cache

          echo "## 🔍 Security Update Check" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Quick security scan
        run: |
          for service in db wiki; do
            echo "Scanning $service for security updates..."
            
            # Run Trivy scan
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $HOME/Library/Caches:/root/.cache/ \
              aquasec/trivy:latest image --severity HIGH,CRITICAL \
              --format table my_wiki-$service:latest || true
          done

  create-maintenance-schedule:
    runs-on: ubuntu-latest
    needs: [check-base-images, check-security-updates]
    if: always()

    steps:
      - name: Create maintenance recommendations
        run: |
          echo "# 🔧 Maintenance Schedule Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Regular Maintenance Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekly**: Check for base image updates" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly**: Review and apply security patches" >> $GITHUB_STEP_SUMMARY
          echo "- **Quarterly**: Major version updates (with testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Security Best Practices" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor security advisories for PostgreSQL and Wiki.js" >> $GITHUB_STEP_SUMMARY
          echo "- Keep base images updated to latest patch versions" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly scan for vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Test updates in staging before production" >> $GITHUB_STEP_SUMMARY
