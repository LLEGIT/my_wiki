name: Docker Build and Security Scan

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run weekly security scans on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'

env:
  # Test environment variables for building
  DB_NAME: wiki
  DB_USER: wikijs
  DB_PASS: test_password_123
  DB_HOST: db
  DB_PORT: 5432
  HOST_PORT: 8080

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [db, wiki]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASS=${{ env.DB_PASS }}
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          HOST_PORT=${{ env.HOST_PORT }}
          EOF

      - name: Build ${{ matrix.service }} image
        run: |
          docker compose build ${{ matrix.service }}

      - name: Test ${{ matrix.service }} image creation
        run: |
          # Verify the image was created successfully
          docker images | grep my_wiki-${{ matrix.service }}

      - name: Run Trivy vulnerability scanner on ${{ matrix.service }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my_wiki-${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my_wiki-${{ matrix.service }}:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASS=${{ env.DB_PASS }}
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          HOST_PORT=${{ env.HOST_PORT }}
          EOF

      - name: Build and start services
        run: |
          docker compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "Waiting for database to be ready..."
          timeout 60 bash -c 'until docker compose exec -T db pg_isready -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }}; do sleep 2; done'

          echo "Waiting for wiki to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:${{ env.HOST_PORT }}/healthz || curl -f http://localhost:${{ env.HOST_PORT }}; do sleep 5; done'

      - name: Test database connection
        run: |
          docker compose exec -T db psql -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }} -c "SELECT version();"

      - name: Test wiki accessibility
        run: |
          # Test if wiki responds (may redirect to setup page)
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.HOST_PORT }})
          if [ "$response" -eq 200 ] || [ "$response" -eq 302 ] || [ "$response" -eq 301 ]; then
            echo "Wiki is accessible (HTTP $response)"
          else
            echo "Wiki is not accessible (HTTP $response)"
            exit 1
          fi

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Database logs ==="
          docker compose logs db
          echo "=== Wiki logs ==="
          docker compose logs wiki
          echo "=== Service status ==="
          docker compose ps

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v

  docker-compose-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose.yaml
        run: |
          # Create a minimal .env file for validation
          cat > .env << EOF
          DB_NAME=test
          DB_USER=test
          DB_PASS=test
          DB_HOST=db
          DB_PORT=5432
          HOST_PORT=8080
          EOF

          # Validate docker compose syntax
          docker compose config

      - name: Check for security best practices
        run: |
          echo "Checking for security best practices..."

          # Check if .env is in .gitignore
          if ! grep -q "^.env$" .gitignore; then
            echo "❌ .env file should be in .gitignore"
            exit 1
          else
            echo "✅ .env file is properly ignored"
          fi

          # Check if default passwords are used in compose file
          if grep -q "password.*=" docker-compose.yaml; then
            echo "⚠️  Warning: Hardcoded passwords found in docker compose.yaml"
          else
            echo "✅ No hardcoded passwords in docker-compose.yaml"
          fi

          # Check if services use restart policies
          if ! grep -q "restart:" docker-compose.yaml; then
            echo "⚠️  Warning: No restart policies defined"
          else
            echo "✅ Restart policies are defined"
          fi

  dockerfile-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint on DB Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: .docker/db/Dockerfile
          format: sarif
          output-file: hadolint-db.sarif

      - name: Run Hadolint on Wiki Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: .docker/wiki/Dockerfile
          format: sarif
          output-file: hadolint-wiki.sarif

      - name: Upload Hadolint scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-db.sarif

      - name: Upload Hadolint scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-wiki.sarif
